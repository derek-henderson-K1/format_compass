{"version":3,"file":"section.min.js","sources":["../../../src/local/content/section.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course section format component.\n *\n * @module     core_courseformat/local/content/section\n * @class      core_courseformat/local/content/section\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Header from 'core_courseformat/local/content/section/header';\nimport DndSection from 'core_courseformat/local/courseeditor/dndsection';\nimport Templates from 'core/templates';\nimport courseActions from 'core_course/actions';\n\nexport default class extends DndSection {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_section';\n        // Default query selectors.\n        this.selectors = {\n            SECTION_ITEM: `[data-for='section_title']`,\n            CM: `[data-for=\"cmitem\"]`,\n            SECTIONINFO: `[data-for=\"sectioninfo\"]`,\n            SECTIONBADGES: `[data-region=\"sectionbadges\"]`,\n            SHOWSECTION: `[data-action=\"sectionShow\"]`,\n            HIDESECTION: `[data-action=\"sectionHide\"]`,\n            ACTIONTEXT: `.menu-action-text`,\n            ICON: `.icon`,\n        };\n        // Most classes will be loaded later by DndCmItem.\n        this.classes = {\n            LOCKED: 'editinprogress',\n            HASDESCRIPTION: 'description',\n            HIDE: 'd-none',\n            HIDDEN: 'hidden',\n        };\n\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the initial state\n     */\n    stateReady(state) {\n        this.configState(state);\n        // Drag and drop is only available for components compatible course formats.\n        if (this.reactive.isEditing && this.reactive.supportComponents) {\n            // Section zero and other formats sections may not have a title to drag.\n            const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\n            if (sectionItem) {\n                // Init the inner dragable element.\n                const headerComponent = new Header({\n                    ...this,\n                    element: sectionItem,\n                    fullregion: this.element,\n                });\n                this.configDragDrop(headerComponent);\n            }\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `section[${this.id}]:updated`, handler: this._refreshSection},\n        ];\n    }\n\n    /**\n     * Validate if the drop data can be dropped over the component.\n     *\n     * @param {Object} dropdata the exported drop data.\n     * @returns {boolean}\n     */\n    validateDropData(dropdata) {\n        // If the format uses one section per page sections dropping in the content is ignored.\n       if (dropdata?.type === 'section' && this.reactive.sectionReturn != 0) {\n            return false;\n        }\n        return super.validateDropData(dropdata);\n    }\n\n    /**\n     * Get the last CM element of that section.\n     *\n     * @returns {element|null}\n     */\n    getLastCm() {\n        const cms = this.getElements(this.selectors.CM);\n        // DndUpload may add extra elements so :last-child selector cannot be used.\n        if (!cms || cms.length === 0) {\n            return null;\n        }\n        return cms[cms.length - 1];\n    }\n\n    /**\n     * Update a content section using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSection({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.element.classList.toggle(this.classes.HIDDEN, !element.visible ?? false);\n        this.locked = element.locked;\n        // The description box classes depends on the section state.\n        const sectioninfo = this.getElement(this.selectors.SECTIONINFO);\n        if (sectioninfo) {\n            sectioninfo.classList.toggle(this.classes.HASDESCRIPTION, element.hasrestrictions);\n        }\n        // Update title / subtitle.\n        if(element.subname) {\n            if(this.getElement(\".compass-section-subname-container\")) {\n                let titles = this.getElements(\".compass-section-title\");\n                if(element.title != \"\") {\n                    titles[0].innerHTML = element.title;\n                } else {\n                    titles[0].innerHTML = 'Section ' + element.section;\n                }\n                titles[1].innerHTML = element.subname;\n            } else {\n                courseActions.refreshSection(this.element, element.id);\n            }\n        } else {\n            if(this.getElement(\".compass-section-subname-container\")) {\n                this.getElement(\".compass-section-subname-container\").remove();\n                this.getElement(\".compass-section-title\").classList.remove(\"compass-section-hassubname\");\n                this.getElement(\".compass-section-header\").classList.remove(\"compass-section-hassubname\");\n                this.getElement(\".compass-section-title\").classList.add(\"compass-header-offset\");\n            }\n            if(this.getElement(\".compass-section-title\")) {\n                if(element.title) {\n                    this.getElement(\".compass-section-title\").innerHTML = element.title;\n                } else {\n                    this.getElement(\".compass-section-title\").innerHTML = \"Section \" + element.section;\n                }\n            }\n        }\n\n        // Update section badges and menus.\n        this._updateBadges(element);\n        this._updateActionsMenu(element);\n    }\n\n    /**\n     * Update a section badges using the state information.\n     *\n     * @param {object} section the section state.\n     */\n    _updateBadges(section) {\n        const current = this.getElement(`${this.selectors.SECTIONBADGES} [data-type='iscurrent']`);\n        current?.classList.toggle(this.classes.HIDE, !section.current);\n\n        const hiddenFromStudents = this.getElement(`${this.selectors.SECTIONBADGES} [data-type='hiddenfromstudents']`);\n        hiddenFromStudents?.classList.toggle(this.classes.HIDE, section.visible);\n    }\n\n    /**\n     * Update a section action menus.\n     *\n     * @param {object} section the section state.\n     */\n    async _updateActionsMenu(section) {\n        let selector;\n        let newAction;\n        if (section.visible) {\n            selector = this.selectors.SHOWSECTION;\n            newAction = 'sectionHide';\n        } else {\n            selector = this.selectors.HIDESECTION;\n            newAction = 'sectionShow';\n        }\n        // Find the affected action.\n        const affectedAction = this.getElement(selector);\n        if (!affectedAction) {\n            return;\n        }\n        // Change action.\n        affectedAction.dataset.action = newAction;\n        // Change text.\n        const actionText = affectedAction.querySelector(this.selectors.ACTIONTEXT);\n        if (affectedAction.dataset?.swapname && actionText) {\n            const oldText = actionText?.innerText;\n            actionText.innerText = affectedAction.dataset.swapname;\n            affectedAction.dataset.swapname = oldText;\n        }\n        // Change icon.\n        const icon = affectedAction.querySelector(this.selectors.ICON);\n        if (affectedAction.dataset?.swapicon && icon) {\n            const newIcon = affectedAction.dataset.swapicon;\n            if (newIcon) {\n                const pixHtml = await Templates.renderPix(newIcon, 'core');\n                Templates.replaceNode(icon, pixHtml, '');\n            }\n        }\n    }\n}\n"],"names":["DndSection","create","name","selectors","SECTION_ITEM","CM","SECTIONINFO","SECTIONBADGES","SHOWSECTION","HIDESECTION","ACTIONTEXT","ICON","classes","LOCKED","HASDESCRIPTION","HIDE","HIDDEN","id","this","element","dataset","stateReady","state","configState","reactive","isEditing","supportComponents","sectionItem","getElement","headerComponent","Header","fullregion","configDragDrop","getWatchers","watch","handler","_refreshSection","validateDropData","dropdata","type","sectionReturn","super","getLastCm","cms","getElements","length","classList","toggle","DRAGGING","dragging","locked","visible","sectioninfo","hasrestrictions","subname","titles","title","innerHTML","section","refreshSection","remove","add","_updateBadges","_updateActionsMenu","current","hiddenFromStudents","selector","newAction","affectedAction","action","actionText","querySelector","swapname","oldText","innerText","icon","swapicon","newIcon","pixHtml","Templates","renderPix","replaceNode"],"mappings":"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"}