{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     format_compass/local/content/actions\n * @class      format_compass/local/content/actions\n * @copyright  2023 Knowledgeone inc. <https://knowledgeone.ca>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport {BaseComponent} from 'core/reactive';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport ModalForm from 'core_form/modalform';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport {getList} from 'core/normalise';\nimport * as CourseEvents from 'core_course/events';\nimport Pending from 'core/pending';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\nimport ajax from 'core/ajax';\nimport courseActions from 'core_course/actions';\nimport Chart from 'format_compass/local/vendors/chart';\nimport {init as chartInit} from 'format_compass/local/assessments_wheels';\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\n// Mutations are dispatched by the course content actions.\n// Formats can use this module addActions static method to add custom actions.\n// Direct mutations can be simple strings (mutation) name or functions.\nconst directMutations = {\n    sectionHide: 'sectionHide',\n    sectionShow: 'sectionShow',\n    cmHide: 'cmHide',\n    cmShow: 'cmShow',\n    cmStealth: 'cmStealth',\n    cmMoveRight: 'cmMoveRight',\n    cmMoveLeft: 'cmMoveLeft',\n};\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            // Move modal selectors.\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            MODALTOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n            CONTENTTREE: `#destination-selector`,\n            ACTIONMENU: `.action-menu`,\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\n        };\n        // Component css classes.\n        this.classes = {\n            DISABLED: `text-body`,\n            ITALIC: `font-italic`,\n        };\n    }\n\n    /**\n     * Add extra actions to the module.\n     *\n     * @param {array} actions array of methods to execute\n     */\n    static addActions(actions) {\n        for (const [action, mutationReference] of Object.entries(actions)) {\n            if (typeof mutationReference !== 'function' && typeof mutationReference !== 'string') {\n                throw new Error(`${action} action must be a mutation name or a function`);\n            }\n            directMutations[action] = mutationReference;\n        }\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data.\n     *\n     */\n    stateReady(state) {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n        // Check section limit.\n        this._checkSectionlist({state});\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\n        this.addEventListener(\n            this.element,\n            CourseEvents.sectionRefreshed,\n            () => this._checkSectionlist({state})\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n            {watch: `section.sectionweight:updated`, handler: this._updateSectionWeight},\n        ];\n    }\n\n    /**\n     * Compile the chart data for all sections\n     *\n     * @param {Object} detail\n     * @param {Object} detail.state the state data.\n     * @returns {Array} of all the charts data.\n     */\n    async _getAllChartData({state}) {\n        const course_format_options = await this.getCourseFormatOptions(state.course.id);\n        var assessmentscutoff = course_format_options.assessmentscutoff;\n        var chartsData = [];\n\n\n        // Get the chart values for each sections.\n        state.section.forEach((section) => {\n\n            // Only for assessments.\n            if(parseInt(section.number) >= parseInt(assessmentscutoff)) {\n                // Only for graded.\n                if(section.sectionweight.type_of_grade_weighting == 'weighttype_weighted') {\n                    let chart = {};\n                    chart.chartValue = '';\n                    chart.chartColor = '';\n                    chart.chartKey = '';\n\n                    var percentagetotal = 0;\n                    // Single.\n                    if(section.sectionweight.weighttype_singlemultiple == 'weighttype_singlemultiple_single') {\n                        percentagetotal = section.sectionweight.weighttype_singlevalue_weightvalue;\n                        chart.chartValue = percentagetotal;\n                    }\n                    // Multiplier.\n                    if(section.sectionweight.weighttype_singlemultiple == 'weighttype_singlemultiple_multiplier') {\n                        percentagetotal = section.sectionweight.weighttype_multiplier_weightvalue * section.sectionweight.weighttype_multiplier_multipliervalue;\n                        chart.chartValue = percentagetotal;\n                    }\n                    // CSV.\n                    if(section.sectionweight.weighttype_singlemultiple == 'weighttype_singlemultiple_csv') {\n                        var csvValues = section.sectionweight.weighttype_multiplier_csvvalue.replace(' ', '');\n                        csvValues = csvValues.split(',');\n                        csvValues.forEach((value) => {\n                            percentagetotal += parseInt(value);\n                        });\n                        chart.chartValue = percentagetotal;\n                    }\n\n                    // chartKeys will help identifying the chart values.\n                    chart.chartKey = section.id.toString();\n                    // Set all the colors to the default bg color, the active color will be changed in assessments_wheels.js.\n                    chart.chartColor = getComputedStyle(document.body).getPropertyValue('--weight_wheel_bg_colour');\n                    chartsData.push(chart);\n                }\n            }\n        });\n\n        // Compile the total percentage.\n        var newChartFillTotal = 0;\n        chartsData.forEach((item) => {\n            newChartFillTotal += parseInt(item.chartValue);\n        });\n\n        // If total percentage is less than 100, push a filler value and set it's color to disabled.\n        if(newChartFillTotal < 100) {\n            let chart = {};\n            chart.chartValue = '';\n            chart.chartKey = 'fill';\n            chart.chartColor = '';\n            chart.chartValue = 100-newChartFillTotal;\n            chart.chartColor = getComputedStyle(document.body).getPropertyValue('--weight_wheel_disabled_colour');\n            chartsData.push(chart);\n        }\n        return chartsData;\n    }\n\n    /**\n     * Update all the assessments weightwheels chart.\n     *\n     * @param {Object} detail\n     * @param {Object} detail.state the state data.\n     * @param {array} chartData data for the chart.\n     */\n    async _updateAllCharts({state}, chartData) {\n        const course_format_options = await this.getCourseFormatOptions(state.course.id);\n        var assessmentscutoff = course_format_options.assessmentscutoff;\n        state.section.forEach((section) => {\n            if(parseInt(section.number) >= parseInt(assessmentscutoff)) {\n                if(section.sectionweight.type_of_grade_weighting == 'weighttype_weighted') {\n                    window['chartUpdateData' + section.id](chartData, state.course.sectionlist);\n                }\n            }\n        });\n    }\n\n    /**\n     * Re-render weightwheels templates\n     *\n     * @param {Object} detail\n     * @param {Object} detail.state the state data.\n     * @param {Object} detail.element the element data.\n     */\n    async _updateSectionWeight({state,element}) {\n        // Re-render ungraded.\n        if(element.sectionweight.type_of_grade_weighting == 'weighttype_ungraded') {\n            Templates.renderForPromise('format_compass/local/assessments/weightwheels/ungraded', {'id' : element.id, 'editing' : true}).then(({html}) => {\n                document.getElementById(\"assessment\" + element.id + \"-weight-container\").innerHTML = html;\n            });\n\n            // Update all the charts.\n            chartData = await this._getAllChartData({state, element});\n            this._updateAllCharts({state},chartData);\n        }\n\n        // Re-render bonus.\n        if(element.sectionweight.type_of_grade_weighting == 'weighttype_bonus') {\n            var bonuspercent;\n            await getString('assessments_chart_percent', 'format_compass', element.sectionweight.weighttype_bonus_value).then(str => {\n                bonuspercent = str;\n            });\n            Templates.renderForPromise('format_compass/local/assessments/weightwheels/bonus', {'id' : element.id, 'editing' : true, 'bonuspercent' : bonuspercent}).then(({html}) => {\n                document.getElementById(\"assessment\" + element.id + \"-weight-container\").innerHTML = html;\n            });\n\n            // Update all the charts.\n            chartData = await this._getAllChartData({state, element});\n            this._updateAllCharts({state},chartData);\n        }\n\n        // Re-render graded\n        if(element.sectionweight.type_of_grade_weighting == 'weighttype_weighted') {\n            var chartData;\n            var chartPercentBreakdown = '';\n            var chartPercent = '';\n\n            // Single.\n            if(element.sectionweight.weighttype_singlemultiple == 'weighttype_singlemultiple_single') {\n                await getString('assessments_chart_percent', 'format_compass', element.sectionweight.weighttype_singlevalue_weightvalue).then(str => {\n                    chartPercent = str;\n                });\n            }\n\n            // Multiplier.\n            if(element.sectionweight.weighttype_singlemultiple == 'weighttype_singlemultiple_multiplier') {\n                var percentagetotal = element.sectionweight.weighttype_multiplier_weightvalue * element.sectionweight.weighttype_multiplier_multipliervalue;\n                await getString('assessments_chart_percent', 'format_compass', percentagetotal).then(str => {\n                    chartPercent = str;\n                });\n\n                await getString('assessments_chart_multiplier', 'format_compass', element.sectionweight).then(str => {\n                    chartPercentBreakdown = str;\n                });\n            }\n\n            // CSV.\n            if(element.sectionweight.weighttype_singlemultiple == 'weighttype_singlemultiple_csv') {\n                var totalweight = 0;\n                var csvValues = element.sectionweight.weighttype_multiplier_csvvalue.replace(/ /g, '').split(',');\n\n                csvValues.forEach((value) => {\n                    totalweight += parseInt(value);\n                });\n\n                chartPercent = await getString('assessments_chart_percent', 'format_compass', totalweight);\n                chartPercentBreakdown = '(' + element.sectionweight.weighttype_multiplier_csvvalue.replace(/,/g, '+').replace(/ /g, '') + ')';\n            }\n\n            // Update all the charts.\n            chartData = await this._getAllChartData({state, element});\n            this._updateAllCharts({state},chartData);\n\n            let chartValues = [];\n            let chartKeys = [];\n            let chartColors = [];\n\n            chartData.forEach((item,i) => {\n                chartValues.push(item.chartValue);\n                chartKeys.push(item.chartKey);\n                chartColors.push(item.chartColor);\n            });\n\n            // Create a new chart.\n            Templates.renderForPromise('format_compass/local/assessments/weightwheels/graded', {'id' : element.id, 'editing' : true, 'chartpercent' : chartPercent}).then(({html}) => {\n                document.getElementById(\"assessment\" + element.id + \"-weight-container\").innerHTML = html;\n                var canvasId = 'weightwheel' + element.id;\n                chartInit(canvasId,chartValues.toString(),chartColors.toString(),chartKeys.toString(),element.id);\n                document.querySelector(\"#assessment\" + element.id + \"-weight-container .compass-weightwheel-percent-breakdown-edit\").innerHTML = chartPercentBreakdown;\n            });\n\n        }\n    }\n\n    _dispatchClick(event) {\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n        if (target.classList.contains(this.classes.DISABLED)) {\n            event.preventDefault();\n            return;\n        }\n\n        // Invoke proper method.\n        const actionName = target.dataset.action;\n        const methodName = this._actionMethodName(actionName);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n            return;\n        }\n\n        // Check direct mutations or mutations handlers.\n        if (directMutations[actionName] !== undefined) {\n            if (typeof directMutations[actionName] === 'function') {\n                directMutations[actionName](target, event);\n                return;\n            }\n            this._requestMutationAction(target, event, directMutations[actionName]);\n            return;\n        }\n    }\n\n     /**\n     * Section renaming modal\n     * @param {Object} target clicked DOM element.\n     * @param {Object} event click event.\n     */\n    async _requestRenameSection(target, event) {\n        event.preventDefault();\n        const state = JSON.parse(JSON.stringify(this.reactive.state));\n        const courseId = state.course.id;\n        const sectionId = target.getAttribute('data-id');\n        const sectionInfo = this.reactive.get('section', sectionId);\n        const urlParams = new URLSearchParams(window.location.href);\n        const tab = urlParams.get('tab');\n\n        const modalForm = new ModalForm({\n            formClass: 'format_compass\\\\form\\\\renamesection_form',\n            args: {\n                courseid: courseId,\n                id: sectionId,\n                title: sectionInfo.title,\n                num: sectionInfo.number,\n                tab: tab\n            },\n            modalConfig: {\n                title: sectionInfo.title,\n            },\n        });\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n            // Dispatch the renaming so the page doesn't need to be refreshed\n            this.reactive.dispatch('sectionRenameState', e.detail.data);\n        });\n        modalForm.addEventListener(\"change\", (e) => {\n            if(e.target!==null && (e.target.id == \"id_sectionname_type\" || e.target.className.includes(\"custom-select\")))\n            {\n                // Custom checkbox toggle handler\n                this.SetCustomSectionName();\n            }\n        });\n        // Show the form.\n        modalForm.show();\n\n    }\n\n    async _requestEditGradeWeight(target, event) {\n        event.preventDefault();\n        const state = JSON.parse(JSON.stringify(this.reactive.state));\n        const courseId = state.course.id;\n        const sectionId = target.getAttribute('data-id');\n        const sectionInfo = this.reactive.get('section', sectionId);\n        const urlParams = new URLSearchParams(window.location.href);\n        const tab = urlParams.get('tab');\n        const modalForm = new ModalForm({\n            formClass: 'format_compass\\\\form\\\\editgradeweight_form',\n            args: {\n                courseid: courseId,\n                id: sectionId,\n                name: sectionInfo.title,\n                num: sectionInfo.number,\n                tab: tab\n            },\n            modalConfig: {\n                title: sectionInfo.title,\n            },\n        });\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n            // Dispatch the renaming so the page doesn't need to be refreshed\n            this.reactive.dispatch('sectionEditGradeWeight', e.detail.data);\n        });\n        modalForm.addEventListener(\"change\", (e) => {\n            if(e.target!==null && e.target.id == \"id_weighttype_multiplier_csvvalue\") {\n                this.SetCSVPreviewValue();\n            } else if (e.target!==null && (e.target.id == \"id_weighttype_multiplier_weightvalue\" ||\n                                        e.target.id == \"id_weighttype_multiplier_multipliervalue\")) {\n                this.SetMultiplierPreviewValue();\n            } else if (e.target!==null && (e.target.id == \"id_weighttype_singlemultiple\")) {\n                this.SetSingleMultiplePreviewValue();\n            } else if (e.target!==null && (e.target.id == \"id_type_of_grade_weighting\")) {\n                this.SetTypeOfGradeWeightingValue();\n            }\n        });\n\n        // Show the form.\n        modalForm.show();\n    }\n\n    SetCSVPreviewValue() {\n        var totalValue = this.CalculateCSVPreviewValue();\n        this.SetPreviewValue(totalValue);\n    }\n\n    SetMultiplierPreviewValue() {\n        var totalValue = this.CalculateMultiplierPreviewValue();\n        this.SetPreviewValue(totalValue);\n    }\n\n    SetSingleMultiplePreviewValue() {\n        var weighttype_singlemultiple = document.getElementById('id_weighttype_singlemultiple').value;\n        if (weighttype_singlemultiple == \"weighttype_singlemultiple_csv\") {\n            this.SetCSVPreviewValue();\n        } else if (weighttype_singlemultiple == \"weighttype_singlemultiple_multiplier\") {\n            this.SetMultiplierPreviewValue();\n        }\n    }\n\n    SetTypeOfGradeWeightingValue() {\n        var type_of_grade_weighting = document.getElementById('id_type_of_grade_weighting').value;\n        if (type_of_grade_weighting == \"weighttype_weighted\") {\n            this.SetSingleMultiplePreviewValue();\n        }\n    }\n\n    /**\n     * Updates the 'section name' input according to the user selection in the modalform\n     */\n    SetCustomSectionName() {\n        var sectionName = document.querySelector('[tag=\"id_sectionname\"]');\n        var first_termvalue = document.getElementById('id_sectionname_first_term').selectedOptions[0].text;\n        var first_numbervalue = document.getElementById('id_sectionname_first_number').selectedOptions[0].text;\n        var second_termvalue = document.getElementById('id_sectionname_second_term').selectedOptions[0].text;\n        var second_numbervalue = document.getElementById('id_sectionname_second_number').selectedOptions[0].text;\n        var sectionname_typevalue = document.getElementById('id_sectionname_type').value;\n\n        if (sectionname_typevalue != \"sectionname_freetype\") {\n            if (sectionname_typevalue == \"sectionname_doubleterm_doublenumber\") {\n                sectionName.value = first_termvalue + \" \" + first_numbervalue + \" - \" + second_termvalue + \" \" + second_numbervalue;\n            } else if (sectionname_typevalue == \"sectionname_singleterm_doublenumber\") {\n                sectionName.value = first_termvalue + \" \" + first_numbervalue + \".\" + second_numbervalue;\n            } else if (sectionname_typevalue == \"sectionname_singleterm_singlenumber\") {\n                sectionName.value = first_termvalue + \" \" + first_numbervalue;\n            }\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Calculate CSVPreviewValue from csv string on change function\n     */\n    CalculateCSVPreviewValue() {\n        var weighttype_multiplier_csvvalue = document.getElementById('id_weighttype_multiplier_csvvalue').value;\n        var weighttype_multiplier_csvarray = weighttype_multiplier_csvvalue.split(',');\n        var totalValue = 0.0;\n        var breakdown = '';\n        weighttype_multiplier_csvarray.forEach((value, i) => {\n            totalValue += parseFloat(value);\n            if (i < weighttype_multiplier_csvarray.length-1) {\n                breakdown += value + '+';\n            } else {\n                breakdown += value;\n            }\n        });\n        if (!isNaN(totalValue)) {\n            var result = (totalValue - Math.floor(totalValue)) !== 0;\n            if (result) {\n                totalValue = totalValue.toFixed(2) + \"%\" + \" (\"  + breakdown.replace(/\\s/g, \"\") + \")\";\n            } else {\n                totalValue = totalValue + \"%\" + \" (\"  + breakdown.replace(/\\s/g, \"\") + \")\";\n            }\n        } else {\n            totalValue= \"N/A\";\n        }\n\n        return totalValue;\n    }\n\n    /**\n     * Calculate MultiplierPreviewValue from weightValue and multiplier on change function\n     */\n    CalculateMultiplierPreviewValue() {\n        var weighttype_multiplier_weightvalue =\n            document.getElementById('id_weighttype_multiplier_weightvalue').value;\n        var weighttype_multiplier_multipliervalue =\n            document.getElementById('id_weighttype_multiplier_multipliervalue').value;\n        if (weighttype_multiplier_weightvalue && weighttype_multiplier_multipliervalue) {\n            var totalValue = weighttype_multiplier_weightvalue * weighttype_multiplier_multipliervalue;\n            if (!isNaN(totalValue)) {\n                var result = (totalValue - Math.floor(totalValue)) !== 0;\n                if (result) {\n                    totalValue = totalValue.toFixed(2);\n                }\n                var breakdown = weighttype_multiplier_multipliervalue + \" x \" +  weighttype_multiplier_weightvalue + \"%\";\n                totalValue += \"%\" + \" (\" + breakdown + \")\";\n            } else {\n                totalValue= \"N/A\";\n            }\n        } else {\n            totalValue= \"N/A\";\n        }\n        return totalValue;\n    }\n\n    /**\n     * Set the preview field based on totalvalue variable\n     * @param {*} totalValue totalvalue that will show in preview field\n     */\n    SetPreviewValue(totalValue){\n        var static_group = document.querySelector(\"[data-groupname=staticgroup] [data-fieldtype=group]\");\n        static_group.innerHTML =  totalValue;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _checkSectionlist({state}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\n    }\n\n    /**\n     * Get the course format options\n     *\n     * @param {String} courseid\n     */\n    async getCourseFormatOptions(courseid) {\n        const args = {};\n        args.courseid = courseid;\n\n       //Call to refresh course format options\n       let ajaxresult;\n       ajaxresult = await ajax.call([{\n           methodname: 'core_courseformat_get_state',\n           args,\n       }])[0];\n\n       //Call to get course format options\n       return JSON.parse(ajaxresult).course_format_options;\n    }\n\n    /**\n     * Get the strings for Lessons and Assessments\n     *\n     * @param {Object} course_format_options\n     */\n    async getCutoffStrings(course_format_options) {\n        const labels = [\n            {\n                key: course_format_options.labelforlessonscutoff,\n                component: 'format_compass'\n            },\n            {\n                key: course_format_options.labelforassessmentscutoff,\n                component: 'format_compass'\n            }\n        ];\n\n        let strings = await getStrings(labels, 'format_compass');\n\n        return strings;\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveSectionModal`);\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n        const state = JSON.parse(JSON.stringify(this.reactive.state));\n\n        //Call to get course format options\n        const course_format_options = await this.getCourseFormatOptions(state.course.id);\n\n        // Labels for course format options\n        const labels = await this.getCutoffStrings(course_format_options);\n\n        data.lessonsLabel = labels[0]; //Lessons\n        data.assessmentsLabel = labels[1]; //Assessments\n\n        data.hasassessments = course_format_options.hasassessments;\n        data.cutoff = course_format_options.assessmentscutoff;\n\n        // Add the target section id and title.\n        data.sectionid = sectionInfo.id;\n        data.sectiontitle = sectionInfo.title;\n\n        data.coursehome = new Object();\n        data.assessments = new Array();\n\n        //Cutoff cannot be 0\n        if(data.cutoff == \"0\") {\n            data.cutoff = data.sections.length;\n        }\n\n        // Split sections into objects to make the Assessments cut-off\n        for(var i = data.sections.length -1; i > -1; i--) {\n            if (data.sections[i].number >= data.cutoff) {\n                data.sections[i].type = \"assessment\";\n                //Only if assessments are enabled\n                if(course_format_options.hasassessments) {\n                    data.assessments.push(data.sections[i]);\n                    data.sections.splice(i, 1);\n                }\n            } else {\n                data.sections[i].type = \"lesson\";\n            }\n        }\n        data.assessments.reverse();\n\n        // Isolate course home\n        data.coursehome = data.sections[0];\n        data.sections.splice(0, 1);\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursesection', 'core'),\n            body: Templates.render('format_compass/local/content/movesection', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element and section zero.\n        const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n        this._disableLink(currentElement);\n        const generalSection = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-number='0']`);\n        this._disableLink(generalSection);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n            },\n            true\n        );\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            let offset = 0;\n\n            // Check if the Section is moving within or outside of the assessments\n            if(currentElement.dataset.type != \"assessment\" && target.dataset.type == \"assessment\") {\n                offset--;\n            } else if(currentElement.dataset.type == \"assessment\" && target.dataset.type != \"assessment\") {\n                offset++;\n            }\n\n            let cutoffs = [{cutoff: [{ assessment: parseInt(data.cutoff) + offset }]}];\n\n            if (!target.matches('a') || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            // Targets Assessments Header\n            if(target.dataset.id != \"assessments_header\") {\n                this.reactive.dispatch('sectionMove', [sectionId], target.dataset.id, cutoffs);\n            } else {\n                // If currentElement is an assessment\n                if(parseInt(currentElement.dataset.number) >= data.cutoff) {\n                    cutoffs[0].cutoff[0].assessment++;\n                    // If sections isn't empty\n                    if(data.sections[0] || parseInt(currentElement.dataset.number) > 1) {\n                        // Only save cutoffs if no move is necessary\n                        if(data.assessments[0].id == currentElement.dataset.id) {\n                            this.reactive.dispatch('saveCutoffs', cutoffs[0].cutoff[0].assessment);\n                        } else {\n                            this.reactive.dispatch('sectionMove', [sectionId], data.assessments[0].id, cutoffs);\n                        }\n                    } else {\n                        this.reactive.dispatch('sectionMove', [sectionId], data.coursehome.id, cutoffs);\n                    }\n                } else {\n                    // Checks if a move is necessary\n                    if(data.sections.length == 1 || data.sections[data.sections.length-1].id == currentElement.dataset.id) {\n                        this.reactive.dispatch('saveCutoffs', cutoffs[0].cutoff[0].assessment);\n                    } else {\n                        this.reactive.dispatch('sectionMove', [sectionId], data.sections[data.sections.length-1].id, cutoffs);\n                    }\n                }\n            }\n            this._destroyModal(modal, editTools);\n        });\n\n        pendingModalReady.resolve();\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const cmInfo = this.reactive.get('cm', cmId);\n\n        event.preventDefault();\n\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveCmModal`);\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n        const state = JSON.parse(JSON.stringify(this.reactive.state));\n\n        //Call to get course format options\n        const course_format_options = await this.getCourseFormatOptions(state.course.id);\n\n        // Labels for course format options\n        const labels = await this.getCutoffStrings(course_format_options);\n\n        data.lessonsLabel = labels[0]; //Lessons\n        data.assessmentsLabel = labels[1]; //Assessments\n\n        data.hasassessments = course_format_options.hasassessments;\n        data.cutoff = course_format_options.assessmentscutoff;\n\n        //Cutoff cannot be 0\n        if(data.cutoff == \"0\") {\n            data.cutoff = data.sections.length;\n        }\n\n        data.coursehome = new Object();\n        data.assessments = new Array();\n\n        //Add assessments header if hasassessments is enabled\n        if(course_format_options.hasassessments) {\n            // Split sections into objects to make the Assessments cut-off\n            for(var i = data.sections.length -1; i > -1; i--) {\n                if (data.sections[i].number >= data.cutoff) {\n                    data.sections[i].type = \"assessment\";\n                    data.assessments.push(data.sections[i]);\n                    data.sections.splice(i, 1);\n                }\n            }\n            data.assessments.reverse();\n        }\n\n        // Isolate course home\n        data.coursehome = data.sections[0];\n        data.sections.splice(0, 1);\n\n        // Add the target cm info.\n        data.cmid = cmInfo.id;\n        data.cmname = cmInfo.name;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursemodule', 'core'),\n            body: Templates.render('format_compass/local/content/movecm', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element.\n        let currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n        this._disableLink(currentElement);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n                ENTER: this.selectors.SECTIONLINK,\n            }\n        );\n\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\n        // All jQuery int this code can be replaced when MDL-71979 is integrated.\n        const sectionnode = currentElement.closest(this.selectors.SECTIONNODE);\n        const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\n        let collapsibleId = toggler.data('target') ?? toggler.attr('href');\n        if (collapsibleId) {\n            // We cannot be sure we have # in the id element name.\n            collapsibleId = collapsibleId.replace('#', '');\n            jQuery(`#${collapsibleId}`).collapse('toggle');\n        }\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            // Get draggable data from cm or section to dispatch.\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n\n            this.reactive.dispatch('cmMove', [cmId], targetSectionId, targetCmId);\n            this._destroyModal(modal, editTools);\n        });\n\n        pendingModalReady.resolve();\n    }\n\n    /**\n     * Handle a create section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n\n        //Get the current tab\n        const urlParams = new URLSearchParams(window.location.href);\n        const tab = urlParams.get('tab');\n\n        event.preventDefault();\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n        const state = JSON.parse(JSON.stringify(this.reactive.state));\n\n        //Call to get course format options\n        const course_format_options = await this.getCourseFormatOptions(state.course.id);\n        data.cutoff = course_format_options.assessmentscutoff;\n\n        //Cutoff cannot be 0\n        if(data.cutoff == \"0\") {\n            data.cutoff = data.sections.length;\n        }\n\n        // Increment the cutoff only if in the lessons tab\n        let cutoffs;\n        if(tab.includes('assessments')) {\n            cutoffs = [{cutoff: [{ assessment: parseInt(data.cutoff)}]}];\n        } else {\n            cutoffs = [{cutoff: [{ assessment: parseInt(data.cutoff) + 1 }]}];\n        }\n\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0, cutoffs);\n    }\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        // Collect section information from the state.\n        const state = JSON.parse(JSON.stringify(this.reactive.state));\n\n        //Call to get course format options\n        const course_format_options = await this.getCourseFormatOptions(state.course.id);\n\n        let offset = 0;\n        let cutoffs;\n\n        // Offset the cutoff if it's within the lessons tab\n        if(course_format_options.hasassessments) {\n            if(parseInt(sectionInfo.number) < parseInt(course_format_options.assessmentscutoff)) {\n                offset--;\n            }\n            cutoffs = [{cutoff: [{ assessment: parseInt(course_format_options.assessmentscutoff) + offset }]}];\n        }\n\n        const cmList = sectionInfo.cmlist ?? [];\n        if (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle) {\n            // We need confirmation if the section has something.\n            const modalParams = {\n                title: getString('confirm', 'core'),\n                body: getString('confirmdeletesection', 'moodle', sectionInfo.title),\n                saveButtonText: getString('delete', 'core'),\n                type: ModalFactory.types.SAVE_CANCEL,\n            };\n\n            const modal = await this._modalBodyRenderedPromise(modalParams);\n\n            modal.getRoot().on(\n                ModalEvents.save,\n                e => {\n                    // Stop the default save button behaviour which is to close the modal.\n                    e.preventDefault();\n                    modal.destroy();\n                    this.reactive.dispatch('sectionDelete', [sectionId], cutoffs);\n                }\n            );\n            return;\n        } else {\n            // We don't need confirmation to delete empty sections.\n            this.reactive.dispatch('sectionDelete', [sectionId], cutoffs);\n        }\n    }\n\n    /**\n     * Basic mutation action helper.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     * @param {string} mutationName the mutation name\n     */\n    async _requestMutationAction(target, event, mutationName) {\n        if (!target.dataset.id) {\n            return;\n        }\n        event.preventDefault();\n        this.reactive.dispatch(mutationName, [target.dataset.id]);\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.DISABLED, locked);\n            element.classList.toggle(this.classes.ITALIC, locked);\n            this.setElementLocked(element, locked);\n        });\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     */\n    _disableLink(element) {\n        if (element) {\n            element.style.pointerEvents = 'none';\n            element.style.userSelect = 'none';\n            element.classList.add(this.classes.DISABLED);\n            element.classList.add(this.classes.ITALIC);\n            element.setAttribute('aria-disabled', true);\n            element.addEventListener('click', event => event.preventDefault());\n        }\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _modalBodyRenderedPromise(modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalFactory.create(modalParams).then((modal) => {\n                modal.setRemoveOnClose(true);\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n\n    /**\n     * Hide and later destroy a modal.\n     *\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\n     *\n     * @param {Modal} modal\n     * @param {HTMLElement} element the dom element to focus on.\n     */\n    _destroyModal(modal, element) {\n        modal.hide();\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\n        if (element) {\n            element.focus();\n        }\n        setTimeout(() =>{\n            modal.destroy();\n            pendingDestroy.resolve();\n        }, 500);\n    }\n\n    /**\n     * Get the closest actions menu toggler to an action element.\n     *\n     * @param {HTMLElement} element the action link element\n     * @returns {HTMLElement|undefined}\n     */\n    _getClosestActionMenuToogler(element) {\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\n        if (!actionMenu) {\n            return undefined;\n        }\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\n    }\n}\n"],"names":["directMutations","sectionHide","sectionShow","cmHide","cmShow","cmStealth","cmMoveRight","cmMoveLeft","BaseComponent","create","name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","classes","DISABLED","ITALIC","actions","action","mutationReference","Object","entries","Error","stateReady","state","addEventListener","this","element","_dispatchClick","_checkSectionlist","CourseEvents","sectionRefreshed","getWatchers","watch","handler","_updateSectionWeight","assessmentscutoff","getCourseFormatOptions","course","id","chartsData","section","forEach","parseInt","number","sectionweight","type_of_grade_weighting","chart","percentagetotal","weighttype_singlemultiple","weighttype_singlevalue_weightvalue","chartValue","weighttype_multiplier_weightvalue","weighttype_multiplier_multipliervalue","csvValues","weighttype_multiplier_csvvalue","replace","split","value","chartKey","toString","chartColor","getComputedStyle","document","body","getPropertyValue","push","newChartFillTotal","item","chartData","window","sectionlist","bonuspercent","renderForPromise","then","_ref4","html","getElementById","innerHTML","_getAllChartData","_updateAllCharts","weighttype_bonus_value","str","_ref5","chartPercentBreakdown","chartPercent","totalweight","chartValues","chartKeys","chartColors","i","_ref6","canvasId","querySelector","event","target","closest","classList","contains","preventDefault","actionName","dataset","methodName","_actionMethodName","undefined","_requestMutationAction","courseId","JSON","parse","stringify","reactive","sectionId","getAttribute","sectionInfo","get","tab","URLSearchParams","location","href","modalForm","ModalForm","formClass","args","courseid","title","num","modalConfig","events","FORM_SUBMITTED","e","dispatch","detail","data","className","includes","SetCustomSectionName","show","SetCSVPreviewValue","SetSingleMultiplePreviewValue","SetTypeOfGradeWeightingValue","SetMultiplierPreviewValue","totalValue","CalculateCSVPreviewValue","SetPreviewValue","CalculateMultiplierPreviewValue","sectionName","first_termvalue","selectedOptions","text","first_numbervalue","second_termvalue","second_numbervalue","sectionname_typevalue","requestName","charAt","toUpperCase","slice","weighttype_multiplier_csvarray","breakdown","parseFloat","length","isNaN","result","Math","floor","toFixed","_setAddSectionLocked","maxsections","ajaxresult","ajax","call","methodname","course_format_options","labels","key","labelforlessonscutoff","component","labelforassessmentscutoff","pendingModalReady","Pending","editTools","_getClosestActionMenuToogler","getExporter","getCutoffStrings","lessonsLabel","assessmentsLabel","hasassessments","cutoff","sectionid","sectiontitle","coursehome","assessments","Array","sections","type","splice","reverse","modalParams","Templates","render","modal","_modalBodyRenderedPromise","modalBody","getBody","currentElement","_disableLink","generalSection","ContentTree","SECTION","TOGGLER","COLLAPSE","offset","cutoffs","assessment","matches","_destroyModal","resolve","cmId","cmInfo","exporter","cmid","cmname","ENTER","sectionnode","toggler","find","collapsibleId","attr","collapse","for","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","cmlist","hassummary","rawtitle","saveButtonText","ModalFactory","types","SAVE_CANCEL","getRoot","on","ModalEvents","save","destroy","mutationName","locked","getElements","toggle","setElementLocked","style","pointerEvents","userSelect","add","setAttribute","Promise","reject","setRemoveOnClose","bodyRendered","setSaveButtonText","catch","hide","pendingDestroy","focus","setTimeout","actionMenu"],"mappings":"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"}