{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_compass/local/content\n * @class      format_compass/local/content\n * @copyright  2023 KnowledgeOne\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Component from 'core_courseformat/local/content';\nimport compassActions from 'format_compass/local/content/actions';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport Mutations from \"format_compass/local/courseeditor/mutations\";\nimport Exporter from \"format_compass/local/courseeditor/exporter\";\nimport * as CourseEvents from 'core_course/events';\nimport Section from 'format_compass/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\nimport {get_string as getString} from 'core/str';\nimport jQuery from 'jquery';\n\nexport default class compassComponent extends Component {\n     /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n\n     static init(target, selectors, sectionReturn) {\n\n        const courseEditor = getCurrentCourseEditor();\n        courseEditor.getExporter = () => new Exporter(courseEditor);\n\n        // Hack to preserve legacy mutations (added in core_course/actions) after we set own plugin mutations.\n        let legacyActivityAction = courseEditor.mutations.legacyActivityAction ?? {};\n        let legacySectionAction = courseEditor.mutations.legacySectionAction ?? {};\n        courseEditor.setMutations(new Mutations());\n        courseEditor.addMutations({legacyActivityAction, legacySectionAction});\n\n        return new compassComponent({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new compassActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document.querySelector(this.selectors.PAGE),\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n\n    /**\n     * Override from course/format/amd/src/local/content.js\n     * Update section collapsed state via bootstrap 4 if necessary.\n     *\n     * Formats that do not use bootstrap 4 must override this method in order to keep the section\n     * toggling working.\n     *\n     * @param {object} args\n     * @param {Object} args.state The state data\n     * @param {Object} args.element The element to update\n     */\n   async _refreshSectionCollapsed({state, element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        // Check if the section is available, avoid throwing javascript errors for sections from other tabs\n        if (target) {\n            // Check if it is already done.\n            const toggler = target.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (element.contentcollapsed !== isCollapsed) {\n                let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n                if (!collapsibleId) {\n                    return;\n                }\n                collapsibleId = collapsibleId.replace('#', '');\n                const collapsible = document.getElementById(collapsibleId);\n                if (!collapsible) {\n                    return;\n                }\n\n                // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n                // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n                // it does not require jQuery anymore (when MDL-71979 is integrated).\n                jQuery(collapsible).collapse(element.contentcollapsed ? 'hide' : 'show');\n            }\n\n            if(target.querySelector(\".compass-assessments-seemore\")) {\n                var seemore = await getString('assessments_seemore', 'format_compass');\n\n                if(isCollapsed) {\n                    target.querySelector(\".compass-assessments-seemore\").innerHTML = '';\n                    target.querySelector(\".compass-assessments-seemore\").blur();\n                    target.querySelector(\".compass-assessments-content-container\").classList.remove(this.classes.COLLAPSED);\n                } else {\n                    target.querySelector(\".compass-assessments-seemore\").innerHTML = seemore;\n                    target.querySelector(\".compass-assessments-content-container\").classList.add(this.classes.COLLAPSED);\n                }\n            }\n\n            this._refreshAllSectionsToggler(state);\n        }\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Collapse and expand sections.\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n            // Check section limit.\n            {watch: `course_format_options.assessmentscutoff:updated`, handler: this._refreshCourseSectionlist},\n        ];\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Check the section list and disable some options if nee ded.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _refreshCourseSectionlist({state}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n\n        //Get tab param\n        const urlParams = new URLSearchParams(window.location.href);\n        const tab = urlParams.get('tab');\n        let sectionlist = [];\n        //If assessments tab is enabled\n        if(state.course_format_options.hasassessments) {\n            //Only list items from within the active tab lessons/assessments\n            if(tab.includes('lessons')) {\n                state.course.sectionlist.forEach((section, index) => {\n                    if(index < parseInt(state.course_format_options.assessmentscutoff)) {\n                        sectionlist.push(section);\n                    }\n                });\n            } else if(tab.includes('assessments')) {\n                state.course.sectionlist.forEach((section, index) => {\n                    if(index >= parseInt(state.course_format_options.assessmentscutoff)) {\n                        sectionlist.push(section);\n                    }\n                });\n            } else {\n                sectionlist.push(state.course.sectionlist[0]);\n            }\n        } else {\n            // Assessments tab turned off\n            if(!tab.includes(\"lessons\")) {\n                //Do not reorder when on the course home tab\n                return;\n            } else {\n                sectionlist = state.course.sectionlist ?? [];\n            }\n        }\n\n        if(tab.includes('assessments')) {\n            sectionlist.forEach((section) => {\n                if(window[\"chartUpdateData\" + section]) {\n                    window[\"chartUpdateData\" + section](null, sectionlist);\n                }\n            });\n        }\n\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n      _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        const urlParams = new URLSearchParams(window.location.href);\n        const tab = urlParams.get('tab');\n        let cutoff = parseInt(state.course_format_options.assessmentscutoff);\n        state.section.forEach(\n            section => {\n                let secnum = section.section;\n                if (tab == 'assessments') {\n                    if (secnum >= cutoff) {\n                        allcollapsed = allcollapsed && section.contentcollapsed;\n                        allexpanded = allexpanded && !section.contentcollapsed;\n                    }\n                } else {\n                    if (secnum < cutoff) {\n                        allcollapsed = allcollapsed && section.contentcollapsed;\n                        allexpanded = allexpanded && !section.contentcollapsed;\n                    }\n                }\n            }\n        );\n\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n}"],"names":["compassComponent","Component","target","selectors","sectionReturn","courseEditor","getExporter","Exporter","legacyActivityAction","mutations","legacySectionAction","setMutations","Mutations","addMutations","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","this","_sectionTogglers","toogleAll","getElement","TOGGLEALL","collapseElementIds","getElements","COLLAPSE","map","id","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","isEditing","compassActions","classList","add","classes","STATEDREADY","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","PAGE","_scrollHandler","SECTION","toggler","isCollapsed","contains","COLLAPSED","contentcollapsed","collapsibleId","dataset","getAttribute","replace","collapsible","collapse","seemore","innerHTML","blur","remove","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_scanIndex","sections","item","Section","CM","cms","CmItem","tab","URLSearchParams","window","location","href","get","sectionlist","course_format_options","hasassessments","includes","course","forEach","section","index","parseInt","assessmentscutoff","push","listparent","COURSE_SECTIONLIST","createSection","_createSectionItem","bind","_fixOrder","dettachedSections","allcollapsed","allexpanded","cutoff","secnum"],"mappings":";;;;;;;;2iCAmCqBA,yBAAyBC,6BAU7BC,OAAQC,UAAWC,sEAEtBC,cAAe,0CACrBA,aAAaC,YAAc,IAAM,IAAIC,kBAASF,kBAG1CG,mDAAuBH,aAAaI,UAAUD,4EAAwB,GACtEE,mDAAsBL,aAAaI,UAAUC,6EAAuB,UACxEL,aAAaM,aAAa,IAAIC,oBAC9BP,aAAaQ,aAAa,CAACL,qBAAAA,qBAAsBE,oBAAAA,sBAE1C,IAAIV,iBAAiB,CACxBc,QAASC,SAASC,eAAed,QACjCe,UAAU,0CACVd,UAAAA,UACAC,cAAAA,gBASRc,WAAWC,YACFC,sBAEAC,iBAAiBC,KAAKR,QAAS,QAASQ,KAAKC,wBAG5CC,UAAYF,KAAKG,WAAWH,KAAKnB,UAAUuB,cAC7CF,UAAW,OAILG,mBAAqB,IADFL,KAAKM,YAAYN,KAAKnB,UAAU0B,WACRC,KAAIhB,SAAWA,QAAQiB,KACxEP,UAAUQ,aAAa,gBAAiBL,mBAAmBM,KAAK,WAE3DZ,iBAAiBG,UAAW,QAASF,KAAKY,yBAC1Cb,iBAAiBG,UAAW,WAAWW,IAE1B,MAAVA,EAAEC,UACGF,mBAAmBC,WAG3BE,2BAA2BlB,OAGhCG,KAAKL,SAASqB,oBAEVhB,KAAKL,SAASsB,eACVC,iBAAelB,WAIlBR,QAAQ2B,UAAUC,IAAIpB,KAAKqB,QAAQC,mBAIvCvB,iBACDC,KAAKR,QACL+B,aAAaC,wBACbxB,KAAKyB,yBAIJ1B,iBACDN,SAASiC,cAAc1B,KAAKnB,UAAU8C,MACtC,SACA3B,KAAK4B,yDAeiB/B,MAACA,MAADL,QAAQA,oBAC5BZ,OAASoB,KAAKG,WAAWH,KAAKnB,UAAUgD,QAASrC,QAAQiB,OAE3D7B,OAAQ,iCAEFkD,QAAUlD,OAAO8C,cAAc1B,KAAKnB,UAAU0B,UAC9CwB,0CAAcD,MAAAA,eAAAA,QAASX,UAAUa,SAAShC,KAAKqB,QAAQY,sEAEzDzC,QAAQ0C,mBAAqBH,YAAa,+BACtCI,4CAAgBL,QAAQM,QAAQxD,8DAAUkD,QAAQO,aAAa,YAC9DF,qBAGLA,cAAgBA,cAAcG,QAAQ,IAAK,UACrCC,YAAc9C,SAASC,eAAeyC,mBACvCI,uCAOEA,aAAaC,SAAShD,QAAQ0C,iBAAmB,OAAS,WAGlEtD,OAAO8C,cAAc,gCAAiC,KACjDe,cAAgB,mBAAU,sBAAuB,kBAElDV,aACCnD,OAAO8C,cAAc,gCAAgCgB,UAAY,GACjE9D,OAAO8C,cAAc,gCAAgCiB,OACrD/D,OAAO8C,cAAc,0CAA0CP,UAAUyB,OAAO5C,KAAKqB,QAAQY,aAE7FrD,OAAO8C,cAAc,gCAAgCgB,UAAYD,QACjE7D,OAAO8C,cAAc,0CAA0CP,UAAUC,IAAIpB,KAAKqB,QAAQY,iBAI7FlB,2BAA2BlB,QASxCgD,0BAGSlD,SAASb,cAAgBkB,KAAKlB,cAG9BkB,KAAKL,SAASqB,kBAGZ,CAEH,CAAC8B,2BAA6BC,QAAS/C,KAAKgD,WAC5C,CAACF,2BAA6BC,QAAS/C,KAAKgD,WAC5C,CAACF,0BAA4BC,QAAS/C,KAAKgD,WAE3C,CAACF,+BAAiCC,QAAS/C,KAAKiD,uBAEhD,CAACH,yCAA2CC,QAAS/C,KAAKkD,0BAE1D,CAACJ,0BAA4BC,QAAS/C,KAAKmD,kBAC3C,CAACL,mCAAqCC,QAAS/C,KAAKoD,2BACpD,CAACN,+BAAiCC,QAAS/C,KAAKqD,uBAEhD,CAACP,sBAAwBC,QAAS/C,KAAKF,gBAEvC,CAACgD,2BAA6BC,QAAS/C,KAAKgD,WAC5C,CAACF,6BAA+BC,QAAS/C,KAAKgD,WAE9C,CAACF,wDAA0DC,QAAS/C,KAAKoD,4BArBlE,GA8BftD,sBAESwD,WACDtD,KAAKnB,UAAUgD,QACf7B,KAAKuD,UACJC,MACU,IAAIC,iBAAQD,aAKtBF,WACDtD,KAAKnB,UAAU6E,GACf1D,KAAK2D,KACJH,MACU,IAAII,gBAAOJ,QAW9BJ,qCAA0BvD,MAACA,gBAEY,GAA/BG,KAAKL,SAASb,2BAMZ+E,IADY,IAAIC,gBAAgBC,OAAOC,SAASC,MAChCC,IAAI,WACtBC,YAAc,MAEftE,MAAMuE,sBAAsBC,eAExBR,IAAIS,SAAS,WACZzE,MAAM0E,OAAOJ,YAAYK,SAAQ,CAACC,QAASC,SACpCA,MAAQC,SAAS9E,MAAMuE,sBAAsBQ,oBAC5CT,YAAYU,KAAKJ,YAGnBZ,IAAIS,SAAS,eACnBzE,MAAM0E,OAAOJ,YAAYK,SAAQ,CAACC,QAASC,SACpCA,OAASC,SAAS9E,MAAMuE,sBAAsBQ,oBAC7CT,YAAYU,KAAKJ,YAIzBN,YAAYU,KAAKhF,MAAM0E,OAAOJ,YAAY,QAE3C,KAECN,IAAIS,SAAS,4CAIbH,0CAActE,MAAM0E,OAAOJ,mEAAe,GAI/CN,IAAIS,SAAS,gBACZH,YAAYK,SAASC,UACdV,OAAO,kBAAoBU,UAC1BV,OAAO,kBAAoBU,SAAS,KAAMN,sBAKhDW,WAAa9E,KAAKG,WAAWH,KAAKnB,UAAUkG,oBAE5CC,cAAgBhF,KAAKiF,mBAAmBC,KAAKlF,MAC/C8E,iBACKK,UAAUL,WAAYX,YAAanE,KAAKnB,UAAUgD,QAAS7B,KAAKoF,kBAAmBJ,eAS9FjE,2BAA2BlB,aACnBjB,OAASoB,KAAKG,WAAWH,KAAKnB,UAAUuB,eACzCxB,kBAIDyG,cAAe,EACfC,aAAc,QAEZzB,IADY,IAAIC,gBAAgBC,OAAOC,SAASC,MAChCC,IAAI,WACtBqB,OAASZ,SAAS9E,MAAMuE,sBAAsBQ,mBAClD/E,MAAM4E,QAAQD,SACVC,cACQe,OAASf,QAAQA,QACV,eAAPZ,IACI2B,QAAUD,SACVF,aAAeA,cAAgBZ,QAAQvC,iBACvCoD,YAAcA,cAAgBb,QAAQvC,kBAGtCsD,OAASD,SACTF,aAAeA,cAAgBZ,QAAQvC,iBACvCoD,YAAcA,cAAgBb,QAAQvC,qBAMlDmD,eACAzG,OAAOuC,UAAUC,IAAIpB,KAAKqB,QAAQY,WAClCrD,OAAO8B,aAAa,iBAAiB,IAErC4E,cACA1G,OAAOuC,UAAUyB,OAAO5C,KAAKqB,QAAQY,WACrCrD,OAAO8B,aAAa,iBAAiB"}