{"version":3,"file":"assessments_wheels.min.js","sources":["../../src/local/assessments_wheels.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index main component.\r\n *\r\n * @module     format_compass/local/assessments_wheels\r\n * @class      format_compass/local/assessments_wheels\r\n * @copyright  2024 KnowledgeOne\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Chart from 'format_compass/local/vendors/chart';\r\n\r\nexport default class Component {\r\n    /**\r\n    * Static method to create a component instance form the mustache template.\r\n    *\r\n    * @param {string} target the DOM main element or its ID\r\n    * @param {string} chartValues list of values to display in chart\r\n    * @param {string} chartColors list of colors to display in chart\r\n    * @param {string} chartKeys list of section ID's with charts\r\n    * @param {object} sectionId current section ID\r\n    */\r\n    static init(target, chartValues, chartColors, chartKeys, sectionId) {\r\n\r\n        const ctx = document.getElementById(target).getContext('2d');\r\n        let chartsData = [];\r\n\r\n        let valuesArray = chartValues.split(',');\r\n        let keysArray = chartKeys.split(',');\r\n        let colorsArray = chartColors.split(',');\r\n\r\n        let colorActive = getComputedStyle(document.body).getPropertyValue('--weight_wheel_fg_colour');\r\n        let colorInactive = getComputedStyle(document.body).getPropertyValue('--weight_wheel_bg_colour');\r\n        let colorDisabled = getComputedStyle(document.body).getPropertyValue('--weight_wheel_disabled_colour');\r\n\r\n        valuesArray.forEach((item,i) => {\r\n            let section = {};\r\n            section.chartValue = valuesArray[i];\r\n            section.chartKey = keysArray[i];\r\n\r\n            if(colorsArray[i] == \"color_active\") {\r\n                section.chartColor = colorActive;\r\n                colorsArray[i] = colorActive;\r\n            } else if(colorsArray[i] == \"color_inactive\") {\r\n                section.chartColor = colorInactive;\r\n                colorsArray[i] = colorInactive;\r\n            } else if(colorsArray[i] != colorActive && colorsArray[i] != colorInactive && colorsArray[i] != colorDisabled){\r\n                section.chartColor = colorDisabled;\r\n                colorsArray[i] = colorDisabled;\r\n            }\r\n            chartsData.push(section);\r\n        });\r\n\r\n\r\n\r\n        var chart = new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: {\r\n            datasets: [{\r\n            data: valuesArray,\r\n            backgroundColor: colorsArray,\r\n            borderWidth: 5\r\n            }]\r\n        },\r\n        options: {\r\n            cutout: '72%',\r\n            elements: {\r\n            arc: {\r\n                borderWidth: 3,\r\n                borderRadius: 10\r\n            }\r\n            },\r\n            legend: {\r\n                display: false\r\n            },\r\n            events: [],\r\n            animation: {\r\n                duration: 0\r\n            }\r\n        }\r\n        });\r\n\r\n\r\n        /**\r\n        * Each section has it's own function which updates the chart with the received data.\r\n        *\r\n        * @param {object} updatedChartData data for all the charts.\r\n        * @param {array} sectionlist new sectionlist order.\r\n        */\r\n        window['chartUpdateData' + sectionId] = function(updatedChartData, sectionlist) {\r\n\r\n            // Update with new data.\r\n            if(updatedChartData !== null) {\r\n                chartsData = JSON.parse(JSON.stringify(updatedChartData));\r\n                chartsData = chartsData.filter(item => sectionlist.includes(item.chartKey) || item.chartKey === 'fill');\r\n                let percentTotal = 0;\r\n\r\n                // Create a map of IDs to index positions\r\n                const keyMap = new Map();\r\n                chartsData.forEach((item, index) => {\r\n                    keyMap.set(item.chartKey, index);\r\n                    if(item.chartKey != 'fill') {\r\n                        percentTotal += parseInt(item.chartValue);\r\n                    }\r\n                });\r\n\r\n                // Sort the values array based on the index positions of IDs\r\n                chartsData.sort((a, b) => {\r\n                    // Filler needs to be set last\r\n                    if (a.chartKey === 'fill') {\r\n                        return 1;\r\n                    }\r\n                    if (b.chartKey === 'fill') {\r\n                        return -1;\r\n                    }\r\n                    const indexA = sectionlist.indexOf(a.chartKey);\r\n                    const indexB = sectionlist.indexOf(b.chartKey);\r\n                    return indexA - indexB;\r\n                });\r\n\r\n                // Add active color to this section.\r\n                chartsData.forEach((item) => {\r\n                    if(item.chartKey == sectionId) {\r\n                        item.chartColor = colorActive;\r\n                    }\r\n                });\r\n\r\n                valuesArray = [];\r\n                keysArray = [];\r\n                colorsArray = [];\r\n\r\n                chartsData.forEach((item) => {\r\n                    valuesArray.push(item.chartValue);\r\n                    keysArray.push(item.chartKey);\r\n                    colorsArray.push(item.chartColor);\r\n                });\r\n            } else {\r\n                // Only move / delete charts.\r\n                chartsData = chartsData.filter(item => sectionlist.includes(item.chartKey) || item.chartKey === 'fill');\r\n                let percentTotal = 0;\r\n\r\n                // Create a map of IDs to index positions\r\n                const keyMap = new Map();\r\n                chartsData.forEach((item, index) => {\r\n                    keyMap.set(item.chartKey, index);\r\n                    if(item.chartKey != 'fill') {\r\n                        percentTotal += parseInt(item.chartValue);\r\n                    }\r\n                });\r\n\r\n                // Sort the values array based on the index positions of IDs\r\n                chartsData.sort((a, b) => {\r\n                    // Filler needs to be set last\r\n                    if (a.chartKey === 'fill') {\r\n                        return 1;\r\n                    }\r\n                    if (b.chartKey === 'fill') {\r\n                        return -1;\r\n                    }\r\n                    const indexA = sectionlist.indexOf(a.chartKey);\r\n                    const indexB = sectionlist.indexOf(b.chartKey);\r\n                    return indexA - indexB;\r\n                });\r\n\r\n                // Reset values.\r\n                valuesArray = [];\r\n                colorsArray = [];\r\n                keysArray = [];\r\n\r\n                chartsData.forEach((item) => {\r\n                    if(item.chartKey == 'fill' && percentTotal < 100) {\r\n                        item.chartValue = 100 - percentTotal;\r\n                    }\r\n                    valuesArray.push(item.chartValue);\r\n                    keysArray.push(item.chartKey);\r\n                    colorsArray.push(item.chartColor);\r\n                });\r\n            }\r\n\r\n            // Updates chart with the new data.\r\n            chart.data.datasets[0].data = valuesArray;\r\n            chart.data.datasets[0].backgroundColor = colorsArray;\r\n            chart.update();\r\n        };\r\n    }\r\n}"],"names":["target","chartValues","chartColors","chartKeys","sectionId","ctx","document","getElementById","getContext","chartsData","valuesArray","split","keysArray","colorsArray","colorActive","getComputedStyle","body","getPropertyValue","colorInactive","colorDisabled","forEach","item","i","section","chartValue","chartKey","chartColor","push","chart","Chart","type","data","datasets","backgroundColor","borderWidth","options","cutout","elements","arc","borderRadius","legend","display","events","animation","duration","window","updatedChartData","sectionlist","JSON","parse","stringify","filter","includes","percentTotal","keyMap","Map","index","set","parseInt","sort","a","b","indexOf","update"],"mappings":"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"}