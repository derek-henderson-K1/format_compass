{"version":3,"file":"courseindex.min.js","sources":["../../../src/local/courseindex/courseindex.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_compass/local/courseindex/courseindex\n * @class      format_compass/local/courseindex/courseindex\n * @copyright  2023 KnowledgeOne\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Component from 'core_courseformat/local/courseindex/courseindex';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\n\nexport default class CourseIndexComponent extends Component {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            CM: `[data-for='cm']`,\n            TOGGLER: `[data-action=\"togglecourseindexsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            DRAWER: `.drawer`,\n            HOME_CONTAINER: `#courseindex-home-container`,\n            LESSONS_CONTAINER: `#courseindex-lessons-container`,\n            ASSESSMENTS_CONTAINER: `#courseindex-assessments-container`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            SECTIONHIDDEN: 'dimmed',\n            CMHIDDEN: 'dimmed',\n            SECTIONCURRENT: 'current',\n            COLLAPSED: `collapsed`,\n            SHOW: `show`,\n        };\n        // Arrays to keep cms and sections elements.\n        this.sections = {};\n        this.cms = {};\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {CourseIndexComponent}\n     */\n    static init(target, selectors) {\n        return new CourseIndexComponent({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n        });\n    }\n\n    getWatchers() {\n        return [\n            {watch: `section.indexcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            {watch: `cm:created`, handler: this._createCm},\n            {watch: `cm:deleted`, handler: this._deleteCm},\n            {watch: `section:created`, handler: this._createSection},\n            {watch: `section:deleted`, handler: this._deleteSection},\n            {watch: `course.pageItem:created`, handler: this._refreshPageItem},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n            // Sections and cm sorting.\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `course_format_options:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n        ];\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const listparent = this.getElement(this.selectors.SECTION_CMLIST, element.id);\n        this._fixCmOrder(listparent, cmlist, this.cms);\n    }\n\n    /**\n     * Fix/reorder the cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {Array} allitems the list of html elements that can be placed in the container\n     */\n    _fixCmOrder(container, neworder, allitems) {\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            const item = allitems[itemid];\n            // Get the current element at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            container.removeChild(container.lastChild);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {object} param\n     * @param {Object} param.state\n     */\n    _refreshCourseSectionlist({state}) {\n        const sectionlist = state.course.sectionlist ?? [];\n        const course_format_options = state.course_format_options;\n        this._fixSectionsOrder(sectionlist, this.sections, course_format_options);\n    }\n\n    /**\n     * Fix/reorder the section order.\n     *\n     * @param {Array} neworder an array with the ids order\n     * @param {Array} allitems the list of html elements that can be placed in the container\n     * @param {Array} course_format_options\n     */\n    _fixSectionsOrder(neworder, allitems, course_format_options) {\n\n        let cutoff = parseInt(course_format_options.assessmentscutoff);\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            const item = allitems[itemid];\n            let currentitem;\n\n            // Goes into course home\n            if(index === 0) {\n                currentitem = this.getElement(this.selectors.HOME_CONTAINER).children[index];\n                this.getElement(this.selectors.HOME_CONTAINER).insertBefore(item, currentitem);\n            } else {\n                //Assessments tab on\n                if(course_format_options.hasassessments) {\n                    // goes into lessons\n                    if(index > 0 && index < cutoff) {\n                        currentitem = this.getElement(this.selectors.LESSONS_CONTAINER).children[index-1];\n                        if (currentitem === undefined) {\n                            this.getElement(this.selectors.LESSONS_CONTAINER).append(item);\n                            return;\n                        }\n                        if (currentitem !== item) {\n                            this.getElement(this.selectors.LESSONS_CONTAINER).insertBefore(item, currentitem);\n                        }\n                    }\n                    // goes into assessments\n                    if(index >= cutoff) {\n                        currentitem = this.getElement(this.selectors.ASSESSMENTS_CONTAINER).children[index-cutoff];\n                        if (currentitem === undefined) {\n                            this.getElement(this.selectors.ASSESSMENTS_CONTAINER).append(item);\n                            return;\n                        }\n                        if (currentitem !== item) {\n                            this.getElement(this.selectors.ASSESSMENTS_CONTAINER).insertBefore(item, currentitem);\n                        }\n                    }\n                } else {\n                    //Assessments tab off everything else goes to lessons\n                    currentitem = this.getElement(this.selectors.LESSONS_CONTAINER).children[index-1];\n                    if (currentitem === undefined) {\n                        this.getElement(this.selectors.LESSONS_CONTAINER).append(item);\n                        return;\n                    }\n                    if (currentitem !== item) {\n                        this.getElement(this.selectors.LESSONS_CONTAINER).insertBefore(item, currentitem);\n                    }\n                }\n            }\n        });\n    }\n}\n"],"names":["CourseIndexComponent","Component","create","name","selectors","SECTION","SECTION_CMLIST","CM","TOGGLER","COLLAPSE","DRAWER","HOME_CONTAINER","LESSONS_CONTAINER","ASSESSMENTS_CONTAINER","classes","SECTIONHIDDEN","CMHIDDEN","SECTIONCURRENT","COLLAPSED","SHOW","sections","cms","target","element","document","getElementById","reactive","getWatchers","watch","handler","this","_refreshSectionCollapsed","_createCm","_deleteCm","_createSection","_deleteSection","_refreshPageItem","_refreshCourseSectionlist","_refreshSectionCmlist","cmlist","listparent","getElement","id","_fixCmOrder","container","neworder","allitems","length","classList","add","innerHTML","remove","forEach","itemid","index","item","currentitem","children","undefined","insertBefore","append","removeChild","lastChild","state","sectionlist","course","course_format_options","_fixSectionsOrder","cutoff","parseInt","assessmentscutoff","hasassessments"],"mappings":"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"}